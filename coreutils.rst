
.. raw:: latex

   \clearpage

Coreutils 大全 #1
=================

はじめに
--------
「情報というのは面白いもので、こちらから探しにいかないとないのと同じで、ゲームなどでも攻略に行き詰まったりして、ネットでWikiを調べてみたり、攻略本を探してようやく出てくるという性質でして、人間、必要に駆られないと、なかなか新しい情報を得ようとしない [#core-bukkyo]_ ものです。」 [#coreutils-monodesu]_

.. [#core-bukkyo] なかなか新しい情報を得ようとしない：新しい情報が得られる便利な仕組みはいくつもあるものの、そういうツールが増えれば増えるほど「自分にとって都合のよい新しい情報」しか目に入らなくなるのが人間の愛おしさである。
.. [#coreutils-monodesu] 蝉丸P (2012). 蝉丸Pのつれづれ仏教講座 株式会社エンターブレイン p.263


ごあいさつ
----------
@tboffice [#twitter-tboffice]_ でございます。今回は、「Coreutils大全」と称してCoreutils [#coreutils-url]_ を一通り解説をしてみようという試みです。
この記事を読んで欲しいのは、linuxの基本的なコマンドの実行方法は分かるけど、知ってるオプションしか知らないし、それで困っていないという方です [#core-pin]_ [#core-anime]_ [#core-sed]_ 。
たとえば、

.. [#twitter-tboffice] http://twitter.com/tboffice
.. [#coreutils-url] http://www.gnu.org/software/coreutils/
.. [#core-pin] えらいピンポイントやな
.. [#core-anime] あと2012年のアニメを見ていると楽しめるかもしれません
.. [#core-sed] coreutilsに含まれないコマンド(sedとか)がばんばん出てくるしどうしてこうなった


* 「 ``cat`` をたんどくでじっこうしたら どうなるです？」
* 「ふぁいるを ``pr | pr`` したらどうなるです？」「べとべとです？」
* 「 ``tail -f`` と ``tailf`` はどこがちがうです？」
* 「だーくふれいむますたー！」(指を指して)「あのころのきおくをけすにはどうやるです？」 [#core-rm-f]_
* 「ばいなりでーたおいしいです」 [#core-yousei]_ 

.. [#core-rm-f] rmコマンドのことなんですが、今回取り上げられませんでした...残念
.. [#core-yousei] 妖精さんをお借りしました。まったく扱いにくいキャラクターだぜ。文章にするとかどくせいがひじょうにわるいです？

普段linuxを使っているけど、このコマンド知らなかった、このオプション知らなかった、こんな使い方ができるのか、という発見が一つでもあれば幸いです。筆者がよく使うコマンドや Tips も載せました。それでは、深遠なるCoreutilsの世界へようこそ。

注意
------------
Coreutilsのバージョンで使えないコマンドやオプションがあります。また、筆者が検証した環境は さくらのVPS CentOS 5.7 と amazon EC2 のマイクロインスタンスです。コマンドのサンプルは実際に実行して試していますが、実際に使うときは誰にも迷惑をかけないところで検証して、コマンドの意味を分かった上で使って下さい。

また、今回、タイトルを「Coreutils大全 #1」としています。紙面 [#core-simen]_ と時間 [#core-time]_ の関係でCoreutilsのすべて解説することが出来ませんでした。

.. [#core-simen] 前回の総ページ数を超えてしまう問題が勃発。さすがに予算が...
.. [#core-time] お昼休みや会社帰りにカフェ的なところで書いてたんですが間に合わず...


Coreutilsとは
-------------
``ls`` や ``cat`` といった、linuxでは欠かせないコマンドをまとめたパッケージです。Coreutilsが登場する前は、Fileutils, Shellutils, Textutilsというutilsがあり、それらを統合したものです。CoreutilsのChangeLogをみたところ、一番古い日付は2002-07-01でした。おそらくそのころに統合されたのでしょう。メジャーバージョンは2003年4月にバージョン5として登場しました。


本稿の構成
----------
最初にCoreutilsパッケージのコマンドに共通のオプションを解説し、Coreutilsのマニュアル [#coreutils-manual]_ の通りにコマンドを並べています。今回は、Coreutilsのマニュアル3章のcatから10章のdircolorsまでを取り上げます。

.. [#coreutils-manual] http://www.gnu.org/software/coreutils/manual/


共通のオプション
-----------------
コマンドの解説に入る前に、Coreutilsに含まれているコマンド共通のオプションです。


``--help``
~~~~~~~~~~
たとえば ``ls`` のコマンドのオプションを調べたいとき


.. code-block:: sh

   $ ls --help


簡易ヘルプはこのオプションをつかえば問題☆解決。え？問題が解決しない？そんなときはこんな感じです。


.. code-block:: sh

   $ man ls
   $ info coreutils ls


infoコマンドを打った後は、Emacsのキーバインドなのでそこさえ気をつければinfoコマンドは良いコマンドだと思いますよ（白目

``--version``
~~~~~~~~~~~~~~
バージョンを表示します。

``--``
~~~~~~~

このオプションを打った後は、オプションが無効になります。
たとえば、こんなコマンドを打ったとき


.. code-block:: sh

   $ ls -l -- -l


-lというファイルあるいはディレクトリをls -lで表示します。

.. code-block:: sh
   
   $ mkdir -- -l


とやると、 ``-l`` というディレクトリが出来ます。touchでも同様。

``-``
~~~~~~

ただのハイフンです。

オプションじゃないよ！ [#haifn]_ 。オプションに見えるだけだよ？ホントだよ？すたんだーどいんぷっとを待つ記号だよ！受け取った結果はコマンドがよろしく処理するよ！
たとえばこんな感じだよ！あとで出てくるから覚えておいてね！

.. [#haifn] と、マニュアルに書いてある。ちっちゃくないそうである

.. code-block:: sh

   $ sort - 
   b # 打つべし
   a # 打つべし
   c # 打つべし
   Ctrl-d # ctrl押しながらdって打つと下記のように表示されるよ！
   a
   b
   c


ファイルまるまる出力系 [#core-sec]_ 
-----------------------------------
ファイルが高まる出力系のコマンドです。ファイルの意識を高めましょう [#file-takamaru]_ 。

.. [#file-takamaru] どうやるんだろう
.. [#core-sec] Coureutilsのセクション3「Output of entire files」です

cat
~~~

情報系の授業や講義があると、linuxの基礎としてほぼ間違いなく出てくるコマンドではないでしょうか。
ファイルを引数にとると、そのファイルの中身を表示しれくれるコマンドです [#cata]_ 。
fileというファイルの中身を出力するときにはこうします。

.. [#cata] 説明が足りないと気づいた方は正しいです。coreutilsのマニュアルの通りの説明は後ほど

.. code-block:: sh

   $ cat file


次に、マニュアルにあるオプションの読み方を説明します。マニュアルには


:: 

   cat [option] [file]...


とあります [#catb]_ 。

.. [#catb] ほかのコマンドのマニュアルもほぼ同様に書かれています


``[]``
   この括弧で囲まれている部分は省略可能です
``...``
   この記号は引数がいくつでもいいよって言ってます

つまりこんな感じでコマンドを作ることが出来ます。

.. code-block:: sh

   $ cat -A -n hogefile fugafile piyofile


主なオプションの説明をします。

-E
   行末がどこまで入ってるか分からないから表示して

-n 
   行数を付けて

-T
   タブ文字も表示して欲しいなぁ

-v 
   改行文字も表示して欲しいなー

-A
   -vETと同じ。改行文字、行末文字、タブも表示します

オプションのFILE部分に - を入れると標準入力になります。fとgというファイルがあって、

.. code-block:: sh

   cat f - g 

このようにコマンドが実行されたときは、fの内容を表示、標準入力の内容表示、ctrl-d(入力の終わり)を押したらgの内容が表示されます。
``cat`` 単独で打ったときは --- マニュアル通りの説明をすると、「ファイルまたは標準入力を標準出力にコピーする」 [#catm]_ です。
引数が指定されていないときは標準入力になります。標準入力と標準出力を体感してください。

.. [#catm] cat copies each file (‘-’ means standard input), or standard input if none are given, to standard output. 


tac
~~~
linuxの講義があっても出てくる頻度はかなり低いのではないでしょうか。
catのあとのtac。お察しの通りです。早速、実行してみましょう。ファイルを作るのが面倒なのでechoしてます。


.. code-block:: sh

   $ echo -e "a\nb\nc" | tac
   c
   b
   a


はい、ファイルの内容を上下逆に出します。1行分の文字の並びを逆にするには、 rev コマンドを使ってください。
誰得魔方陣の例。

.. code-block:: sh

   $ echo -e "2 9 4\n7 5 3\n6 1 8" | tac | rev 


単語単位で逆にするには、

.. code-block:: sh

   $ tac -r -s '[^a-zA-z0-9\-]' file


revと同じ効果をtacでやるには下記 [#taca]_ 。ただし日本語の2バイト文字列も逆にするので化けます。おちゃめさんですね（何


.. code-block:: sh

   $ tac -r -s '.\|' myfile

.. [#taca] 単語単位で逆にする例、とrevの効果の例は下記に載っていました。http://bit.ly/SwZTt4



nl
~~~
行番号を振ってくれるコマンド。単に実行した場合はこんな感じです。

.. code-block:: sh

   $ nl /etc/issue                                                                
   1  CentOS release 5.7 (Final)
   2  Kernel \r on an \m
    

デフォルトだと、空行には番号がつかないです。なお、 ``cat -b file`` と同じです。
オプションに ``-b a`` を付けると空行でも行番号がつきます。いろいろオプションがあるので値を変更してみてください。

.. code-block:: sh

  $ echo -e "hoge\n\nfuga\npiyo" | nl -b a -n rz -s " hoge: " -v 3 -w 3
    003 hoge: hoge
    004 hoge: 
    005 hoge: fuga
    006 hoge: piyo


od
~~~
ファイルを8進数や16進数で表示するコマンド。デフォルトでは8進数で表示。
なんとなくxxdを使ってしまって、出番のないコマンドのような...


.. code-block:: sh

  $ od /etc/issue
  0000000 062503 072156 051517 071040 066145 060545 062563 032440
  0000020 033456 024040 064506 060556 024554 045412 071145 062556
  0000040 020154 071134 067440 020156 067141 056040 005155 000012
  0000057


base64
~~~~~~
データを印刷できる形式に変換するコマンド、とマニュアルには書いてあります。
RFC 4648に則ってデータを変換するコマンドで、133%データが大きくなります。デコードも出来ます。

.. code-block:: sh

   $ base64 /etc/issue | base64 --decode -i
   CentOS release 5.7 (Final)
   Kernel \r on an \m



体裁を整える系
--------------

fmt
~~~
テキストファイルの文字を適当に折り返してくれるコマンド。すでに改行されてしまっているテキストファイルでもなんとかしてくれます [#fmta]_ 。

.. [#fmta] wikipediaのサンプルが易しいです。http://en.wikipedia.org/wiki/Fmt


pr
~~~
印刷用にヘッダとフッタを自動的に追加してくれてくれるコマンド。RFCみたいな文章がすぐに出来るよ！プレーンテキストすばらしい！と筆者の脳内で大好評のコマンドです。お試しあれ。ただし使いどころは限定的です。
なお、 ``pr | pr`` してもヘッダとフッタが二重につくだけなのでやめてください。


fold
~~~~
テキストファイルをぴったりの文字数で改行するコマンド。fmtは空気を読んで、単語をぶったぎらないようにしていますが、このコマンドは空気を読まずにぶった切ります。fmtの様な挙動をさせるには、-sをつけるとある程度空気を読んでくれます。fmtは引用符の中は改行しませんが、foldは改行します。


ファイルの一部を出力
--------------------

head
~~~~~
ファイルの最初の10行を表示するコマンドです。
``-n 5`` で先頭5行を表示。 ``-c 10KB`` で先頭10キロバイトを表示。バイナリファイルでもOK [#head-tty]_ 。headコマンドを宗教上の理由で打ちたくない人は、sed 10q と打ってください。
-n のあとにマイナス値を打つとどうなるでしょうか。環境にもよりますが...自分でやってみてください。

.. [#head-tty] 標準出力に出力してしまって、端末が化けても知らないですよ

tail
~~~~~
ファイルの最後の10行を表示するコマンド。サーバ管理者は毎日打っていると言っても過言ではないです。
-f オプションをつけることによって、ターゲットのファイルに対して追加された文字が出てきます。ちなみに複数のファイルを食わせることができるので、アクセスログファイルとアクセスエラーログファイルの両方を ``tail -f`` で表示することも可能。パイプでつないで特定の文字列だけ出力することも可能。

.. code-block:: sh
   
   tail -f access.log error.log | grep --color -E "(==|192.168)"


ログファイルから==または、192.168という文字列を抜き出しています [#taila]_ 。"=="というのは、やってみてのお楽しみ。

.. [#taila] ちなみにgrepの--colorオプションはこのURLで知りました。http://aerith.mydns.jp/regrets/2008/12/tail-color.html


tailコマンドといえば、tailfコマンドに触れないわけにはいかないでしょう。tail -f コマンドと同じような働きをする tailf コマンドがあります。
結論から言うと、最新のcoreutilsを使っているならどっちも変わりありません [#tailaa]_ 。どちらも inotify イベントを受け取って処理するようになっています。
もしも、対象のファイルが消えてしまうときは、ファイルを読み直す下記のオプションを使いましょう。

.. [#tailaa] coreutils version 7.5でinotifyに対応した模様です。ここを参照しました。http://dev.ariel-networks.com/Members/inoue/tailf/


.. code-block:: sh

   $ tail -F filename


余談として、-r  オプションがあったのですが、coreutilsには実装されていません。tacコマンドを使ってください。


split
~~~~~~
ファイルを分割するコマンドです。
書式は下記です。

.. code-block:: console

   split [option] [input [prefix]]

デフォルトで実行するとこんな感じになります。

.. code-block:: sh

   $ split hogefile
   $ ls 
   hogefile xaa  xab  xac  xad  xae  xaf  xag  xah  xai 

1000行ごとに1ファイルを、カレントディレクトリに生成します [#splita]_ 。xaa xab ... となっているのは、あとでcatすると元に戻る [#splitb]_ からです。100行ごとに分割してほしいとか、xxというファイル名いやだというときはこんな感じです。

.. [#splita] でかいサイズのファイルのときには注意。たくさんファイルができるよ！！
.. [#splitb] cat x* する。xの次はy,zと使っていく。最後どうなるのか実験だ！


.. code-block:: sh
   
   $ split -l 100 hogefile AA
   $ ls 
   hogefile AAaa  AAab  AAac  AAad  AAae  AAaf

-bオプションで任意のバイト数でsplitすることができます。分割しながら圧縮できる(filterに通す)というオプションもあります [#splitc]_ [#splitd]_ [#splite]_ [#splitf]_ [#splitg]_ 。

.. [#splitc] xz -dc BIG.xz | split -b200G --filter='xz > $FILE.xz' - big- (マニュアルより。big-aa.xz, big-ab.xzといったようにファイルが出来上がります)
.. [#splitd] ディスクの単価が安い現代に需要があるかどうか... 
.. [#splite] あるって!開発環境とかいつもディスク枯渇してるじゃん!!
.. [#splitf] 開発環境でsplitする用途があるか疑問だにゃあ
.. [#splitg] 脚注で会話するなよ

使いどころが非常に謎ですが、-nオプションの例を示します [#splitn]_ 。

.. [#splitn] [練習問題] 何をしているのか、マニュアルを読んで確認してみましょう

.. code-block:: sh
   
   $ seq 100 > k; split -nl/7/33 k
   20
   21
   22


csplit
~~~~~~~
「ファイルを文脈ベースで分割する」コマンドです。端的には、特定の文字が出てきたらsplitするコマンドです。使いどころによっては非常に強力なコマンドです。書式は下記。

.. code-block:: sh

   csplit [option]... input pattern...


下記のようにすると、xx00に文字列を出力し、hogeという文字と遭遇したら、別のファイル(xx01)をつくって、そこに出力します。もとのファイルはそのまま残っています。xx01のファイル名の1行目に ``hoge`` という文字が含まれています [#csplist-x]_ 。

.. [#csplist-x] 長い文章をすぱっと二つに分割する時に便利。日本語文字列でもsplitできる。hoge文字列からのoffsetが使えるのがさらに便利

.. code-block:: sh 

   $ csplit hogedfile /hoge/

さてマニュアルを追ってみましょう。「ファイルがたくさんできるから、最初にディレクトリを作り、その中にcdしましょう」と書いてあります。

.. code-block:: sh 

   $ mkdir d && cd d

次に0または5で終わる文字にマッチしたら、そこでまた別のファイルを作ってそこに出力します。 ``{*}`` があるので、マッチしたぶんだけファイルが生成されます。出力されている数字は、それぞれのファイルのバイト数です。

.. code-block:: sh 

   $ seq 14 | csplit - '/[05]$/' '{*}'
   8
   10
   15
   $ ls
   xx00  xx01  xx02

ファイルの中身が、なんとなくどうなっているか分かったところでおわりです。


ファイルの要約系
----------------

wc
~~~
ファイルの行数を知るときによく出るコマンドです。wc -l が有名すぎて、wc単体の結果についてはmanを引かないと忘れてることが多いです。筆者も忘れています [#wca]_ 。
圧縮されているファイルの文字数を知りたいだけの時は、 ``bzcat foo.bz2 | wc -c`` などとするのがよさそう。

.. [#wca] デフォルトでは、行数、単語数、バイト数を出力するんですか？\\つまんねーこと聞くなよ／

-L オプションで、ファイルの中で一番長い行の長さが出ます。また、下記の例では、\*.c または \*.hファイルのリストから、1行の行数が一番長い行の文字列を表示します。

.. code-block:: sh

   find . -name '\*.[ch]' -print0 | wc -L --files0-from=- | tail -n1


sum
~~~
BSDのアルゴリズムで16bitのファイルのチェックサムと1024バイト単位のブロック数を表示するコマンド。
-sオプションでSyatem Vのアルゴリズムを使ってのチェックサムと、512バイト単位のブロック数を表示 [#suma]_ 。

.. [#suma] と、とくに引っ掛かりもなく書いてますが、筆者はBSDやらSystem Vは名前を聞いたことある程度の知識だったりします。BSDに関していえば、学生の頃netBSDで自宅サーバたててたくらいしか接点がないです


cksum
~~~~~
ファイル名を引数に取ると、CRC [#cksum]_ のチェックサムを表示します。

.. [#chksum]_ 巡回冗長検査。Cyclic Redundancy Check のこと。詳しくはwikipdiaへ


md5sum
~~~~~~
128bitのチェックサム(またはフィンガープリントまたはメッセージダイジェスト [#md5sumbb]_ )を計算します。リリースするバイナリと、本番でデプロイされているバイナリが一致しているかどうか確かめる時にたまに使います [#md5sum]_ 。

.. [#md5sumbb] この本を読んでいるのにフィンガープリントとメッセージダイジェストを知らないだと!?出直してこい!!と言われないように、知らない人は調べましょう
.. [#md5sum] 突然真面目にTipsだしてきたよこの筆者

md5sumが一致するかどうか確かめましょう [#md5sumb]_ 。

.. code-block:: sh

   $ touch a && md5sum a > a.sum
   $ md5sum -c a.sum
   a: OK

.. [#md5sumb] d41d8cd98f00b204e9800998ecf8427e という謎の文字列をググると191万件ヒットしました



sha系
~~~~~~~

sha系と、sha2で始まるコマンドをまとめました。

sha1sum 
  SHA-1のダイジェストを計算します。md5sumより安全なダイジェストです。SHA-2にとってかわられて徐々に廃止すべき、とマニュアルに書かれています。

sha2系コマンド
  sha224sum, sha256sum, sha384sum, sha512sumというコマンドがあります。それぞれのビット長のSHAダイジェストを計算します。オプションは、md5sumと同じです。


ソート・アート・オンライン系
----------------------------
ファイルの中身をソートするコマンド群です [#sao]_ 。

.. [#sao] 某SAOとは関係ないです


sort
~~~~~
ファイル中身をソートするコマンド...と書き始めたかったのですが、それ以外にも機能があります。
ファイルを、ソート、マージ、または比較し、表示します。実は3つのモードを持っていて、ソートするモード、マージするモード、ファイルがソートされているかチェックするモードがあります [#sort1]_ 。

.. [#sort1] マニュアルをちょっと意訳してます

チェックオプションのサンプルは下記のようになります。

.. code-block:: sh

   $ seq 12 > k; sort -c k
   sort: k:10: disorder: 10


マージのオプションはこんな感じです。あらかじめソート済みのファイルを流し込んでやるとソートしてくれます。そのため、seqコマンドであらかじめ連続したデータを作っておきます。せっかくなのでheadコマンドで表示してみました。

.. code-block:: sh

   $ seq 0 2 10 > a
   $ seq 1 2 10 > b
   $ head a b 
   ==> a <==
   0
   2
   4
   6
   8
   10

   ==> b <==
   1
   3
   5
   7
   9

次に、こんなソートを試します。

.. code-block:: sh

   $ sort a b
   0
   1
   10
   2
   3
   4
   5
   6
   7
   8
   9

10は後ろに持ってきたいですよね。そんなときには、-n [#sort-n]_ または-g [#sort-g]_ または-h [#sort-h]_ を付けて下さい。

.. [#sort-n] マイナスがついている数値でもソートしてくれます
.. [#sort-g] マイナスやプラスの記号がついていてもソートしてくれます
.. [#sort-h] echo -e "+4\\n1G\\n30K\\n-1" | sort -h などと打ってもK,Gを認識してソートしてくれます。誰得

-uで重複をはじいてくれたり、-rで逆順にしたり、csvデータの特定の数値だけを基準にして並べてくれたり、IPアドレスを小さい順に並べるといったことも可能です。あとはマニュアルとにらめっこして下さい [#sort-tr]_ 。

.. [#sort-tr] coreutilsのコードを眺めると分かるんですが、lsに次いでコードのサイズが大きいです

shuf
~~~~~
ファイルをshuffleしてくれます [#shuf-1]_ 。
もしseqをつかって数字をランダムに出したいときはいったん思いとどまって、下記のようにして下さい [#shuf-2]_ 。

.. code-block:: sh

   $ shuf -i 1-4                                                                      
   3
   1
   2
   4

.. [#shuf-1] CentOS5.7な環境でコマンドうったら出てこない!それもそのはず、CentOSのcoreutilsのバージョンが古いのでした(5.97)。バージョン6.4から新しく加入したコマンドです。amazon ec2には 8.4 が入ってました
.. [#shuf-2] 当然、この通りに出てくるわけではありません。--random-source=FILE というオプションもあるのでこだわりたい方はこだわれます

uniq
~~~~
ソート済みのファイルを引数に取ると、重複行を取り除いたデータを書き出してくれます [#uniq-1]_ 。
sortにも-uオプションがあり、uniqコマンドを単体で打ったときと同じようなことをやってくれます。
よく使うパターン [#uniq-2]_ 


.. code-block:: sh

   cat file | sort | uniq -c | sort -nr | head

.. [#uniq-1] テストに出るぞー
.. [#uniq-2] fileに出現した同じ文字列を出現順にランキング表示です。サーバ管理者でこれが出来なかったら落第だ！

comm
~~~~
2つのファイルを比較して、片方にしかないデータ、両方にしかないデータなどを出力してくれます [#comm-1]_ 。
ベン図を書いて、きちんと整理してデータの集計に当たりましょう。実行結果が独特なのでサンプルを載せます。

.. code-block:: sh

   $ seq 1 3 9 > q
   $ seq 1 2 9 > w
   $ head q w                                                                         
   ==> q <==
   1
   4
   7

   ==> w <==
   1
   3
   5
   7
   9
   $ comm q w
                  1
           3
     4
           5
                  7
           9

.. [#comm-1] 通話のアプリじゃないですよ。念のため

カラムが3つあります。単独でカラムを取り出したい場合は、 ``-1`` , ``-2`` , ``-3`` というオプションがあるのでこれを使います。

ptx
~~~~
日本語マニュアルによると、「ファイルの内容の整列した索引を生成する」「入力ファイルに含まれる単語の索引を並べ替え、前後を含めて出力します。」 [#ptxa]_ とありますが、使いどころが分からないッ!

.. [#ptxa] http://linuxjm.sourceforge.jp/html/GNU_coreutils/man1/ptx.1.html

tsort
~~~~~
前後関係を与えると、その順にソートしてくれます [#tsorta]_ 。

.. [#tsorta] マニュアルによると「有向グラフのトポロジカルなソートを行う」と書かれていて、ちょっと何言ってるかよく分からないです

実行例を見た方が早いです。 ``hoge`` は ``fuga`` の前にあるといった組を用意してtsortに食わせると順番に並び替えます。

.. code-block:: sh

   $ cat text
   hoge fuga
   fuga piyo
   foo bar
   bar baz
   baz hoge

   $ tsort text
   foo
   bar
   baz
   hoge
   fuga
   piyo


テーブルの欄操作
----------------

cut
~~~
ファイルを垂直に切り出します。オプションが必須のコマンドです。
たとえば今月の日曜日の日にちだけ切り出してみましょう [#cal]_ 。-c1-2とすると、1から2文字目までが縦方向に切り取られて表示されます。

.. [#cal]  ``cal`` コマンドは今月のカレンダーを表示しれくれます

.. code-block:: sh

   $ cal | cut -c1-2
   Su
     
    4
   11
   18
   25

csvデータから特定のカラムだけ切り出せます。tsortで出てきたtextファイルに対して2カラム目だけ表示させてみましょう。文字の区切りはスペース1個(-d" ") 、2つめのカラム目を表示(-f2)するオプションを付けます [#cut-awk]_ 。

.. [#cut-awk] [練習問題] awkでも同じコマンドを作ってみましょう

.. code-block:: sh
   
   % cut -f2 -d" " text                                                                
   fuga
   piyo
   bar
   baz
   hoge



paste
~~~~~
ファイルの1行1行を横にひっつけていきます。具体例はマニュアルに書いてあるので読んで下さい。え？読むのがめんどくさい？しょうがないにゃあ [#pastea]_ 。

.. [#pastea] いや、もう何も言うまい。話がややこしくなる

.. code-block:: sh
   
   $ cat num2
   1
   2
   $ cat let3
   a
   b
   c
   $ paste num2 let3
   1       a
   2       b
           c

``-s`` (serial)オプションを付けるとこんな感じ。

.. code-block:: sh

   $ paste -s num2 let3
   1       2
   a       b       c


join
~~~~
ファイルを横にjoinします。pasteと同じように見えるかもしれませんが、1カラム目が共通の2つのファイルに対してよしなにjoinしてくれます。

.. code-block:: sh

   $ cat c 
   00:00 100
   00:01 200
   00:02 300
   $ cat d 
   00:00 150
   00:01 250
   00:02 250
   $ join c d
   00:00 100 150
   00:01 200 250
   00:02 300 250

とあるサイトのバーチャルホスト別のアクセス数を1分ごとに取るスクリプトを書いて、csvで出してみたりするのがお気に入り。hoge-access.min.logはさっきでてきたファイル c の様な出力になっていて、それを3サイト分、csv形式で出力。あとはexcelにでも突っ込んで1分間ごとのアクセス数を色づけして眺めてみるのが良いのではないでしょうか。

.. code-block:: sh

   $ for h in `seq -w 0 23` 
   > do for m in `seq -w 0 59`
   > do echo $h:$m $(cat hoge-access.log | grep -c $h:$m) ; done ; done | \ 
   > tee -a hoge-access.min.log
   $ # などというファイルを三つくらい用意
   $ join hoge-access.min.log fuga-access.min.log | \
   > join - piyo-access.min.log | \ 
   > sed -e 's/ /,/g' > foo.csv



キャラクタ操作
----------------

tr
~~~
文字の変換と削除を行うコマンド。文字の置換の用途で使うことが多いです。

123という文字列を、3を4に、2を1に、1を6に変換します。 ``321`` という文字列を ``456`` という文字列に変換するわけではありません。

.. code-block:: sh
   
   $ echo 123 | tr 321 456
   654

ということは、テキストファイルの文字小文字変換もできます。いずれも同じ意味です [#tra]_ 。

.. [#tra] ファイル名を小文字にしたい？ mv のコマンドを作って実行すればいいのだ☆

.. code-block:: sh

   tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
   tr a-z A-Z
   tr '[:lower:]' '[:upper:]'

trのtipsを調べると大体でてくるのは改行の削除なんですが。

.. code-block:: sh
   
   $ tr -d '\r' < dosfile.txt > unixfile.txt


expand
~~~~~~~
タブを8つのスペースに変換します。おしまい [#expanda]_ 。

.. [#expanda] [練習問題] 同じことをsedあるいは他のコマンドで代用してみよう

unexpand
~~~~~~~~
スペースをタブに変換します。スペースが乱雑に現れてもなんとかしてくれそうです [#unexpand]_ 。

.. [#unexpand] [練習問題] 同じことをsedあるいは他のコマンドで代用してみよう


ファイルリスト表示
------------------

ls
~~~
ディレクトリの中身を表示します。奥深いコマンドです [#ls-7sec]_ 。
さて問題です。 ``ls`` を単独で打ったときはどのような挙動をするでしょうか。おそらくこのような本を買っているということは、説明する必要がないのかなと思いつつ [#ls-alone]_ 。個人的によく打つオプションは、 ``ls -lhatr`` です。
オプションをさらっとおさらいしましょう。

.. [#ls-7sec] マニュアルでは7つのセクションに分かれています
.. [#ls-alone] 解説。カレントディレクトリの中身を表示します。ただし、ディレクトリの中身を再帰的に表示しません。また、 ``.`` から始まるファイルも表示しません。アルファベット順で表示します。リストの結果が端に到達したら縦方向に並べます。画面に出来ない文字は ``?`` で表示します


どんなファイルを表示するか
^^^^^^^^^^^^^^^^^^^^^^^^^^

-a
   ``.`` から始まるファイルも表示します

-A
  ``.`` から始まるファイルを表示しつつ、 ``.`` [#ls-Aa]_ , ``..`` [#ls-Aaa]_ は表示しません

.. [#ls-Aa] カレントディレクトリ
.. [#ls-Aaa] 一つ上のディレクトリ

-B
  ``~`` で終わるバックアップファイルを表示しません

-d
  ディレクトリのみを表示します [#ls-d]_ 

.. [#ls-d] lsしてたくさん普通のファイルがある中でディレクトリだけを表示したいときに使う

-I pattern
  $ ls -I '\*i\*' とすると、 ``i`` を含むファイルやディレクトリが表示されなくなります。

-R
  ディレクトリを再帰的に表示。下手すると大変なことになるので注意

どんな情報を表示するか
^^^^^^^^^^^^^^^^^^^^^^

--full-time
   フルなタイムを表示します。statでいいような...

-g
  ファイルのownerが省略され、groupのみを表示します

-G
  ファイルのownerを表示し、groupは表示しません。GNUでないバージョンのlsの互換性のためのオプション

-i
   inode番号を表示します [#inode]_ 

.. [#inode] inodeってなに？ググりましょう

-h
   無味乾燥な数字の羅列であるファイルのサイズを読みやすくしてくれます。ひゅーまんりりーだぶるのhです

-l
   ファイルのパーミッションやハードリンクの数、owner group、ファイルサイズ、タイムスタンプを表示します

.. tip:: ハードリンクの数
   
   ``-l`` を付けたときこんな感じで表示されます。kというファイルを作っておきます [#ls-k]_ 。
   
   .. code-block:: sh

      $ ls -l k                                                             
      2875312 -rw-r--r-- 1 nanaka nanaka 27 Nov 29 03:19 k

   このとき、nanakaの前の1ってのはなによ、という問題。こうすると分かります

   .. code-block:: sh
      
      $ ln k l # ハードリンクを張ります。同じinodeを指すファイルを作ります
      $ ls -l -i k l
      2875312 -rw-r--r-- 2 nanaka nanaka 27 Nov 29 03:19 k
      2875312 -rw-r--r-- 2 nanaka nanaka 27 Nov 29 03:19 l
      
      $ rm k # kファイルを消すと...?
      $ ls -l -i l                                                                 
      2875312 -rw-r--r-- 1 nanaka nanaka 27 Nov 29 03:19 l # 1 になった！


.. [#ls-k] 抜刀!

-n 
   ファイルのグループ、オーナーを数字で表示します [#ls-n]_ 

.. [#ls-n] see /etc/passwd

-o
   -Gとおなじ

-s
   ファイルに対するディスクの割当量を表示します [#ls-s]_ 

.. [#ls-s] 手元の環境だと、小さなファイルに関しては4 kbytes が割り当てられていました


ソート順を指定
^^^^^^^^^^^^^^^^^^^^^^^^

-c 
   ファイルが作られた(ctime)順でファイルを表示します

-f
   ソートせずそのまま表示します。-aが有効、-l, --color,-sが無効になっています

-r
   逆順にソート

-S
   ファイルの大きさ順にソートします。デフォルトは大きい順に並びます。小さい順に並べるなら、 ``-rS`` 。

-t 
   ファイルの更新時間(mtime)順にソートします

-u
   ファイルにアクセスした時間(atime)順にソートします

-U
   ファイルのソートを行いません。ファイルがたくさん入っているディレクトリで効果を発揮するでしょう

-v
   バージョンや番号順に表示します。1.2.3と1.2.10を意図したとおりに並べたいときにオススメ [#ls-v]_

.. [#ls-v] Coreutilsのセクション10.1.4にどのようにソートするのか書かれています

-X
   拡張子のアルファベット順で表示します。こんなオプション知らなかったぜ

表示のフォーマットを指定
^^^^^^^^^^^^^^^^^^^^^^^^

-1
   1ファイル1行で表示します。ファイルの一覧をファイルに書くときに使います

-C
   ファイルを縦方向に表示します。デフォルトの動作です

--color
   表示の際の色を決めます。--color=autoがaliasにあるのが普通 [#ls-colord]_ 。環境変数の LS_COLORS に色が定義されていますが、いつみても呪文だなあと思います

.. [#ls-colord] ディストリビューションによる？ なぜ疑問系？

-F
   ファイル名の一番最後にファイルタイプを示す1文字をひっつけます。/はディレクトリ、@はシンボリックリンク、>はソケットファイルなどなど


--file-type
   --Fぽいけど実行可能ファイルに関してはファイルタイプを示す1文字がつきません [#ls-ft]_

.. [#ls-ft] [問題] 実行可能ファイルのファイルタイプを表す1文字はなんでしょう

--indicater-style=word
   wordに、none,slash,file-type,classifyのいずれかを入れると、それぞれ、デフォルトの動作、-pオプション、--file-typeオプション、--Fオプションと同じ意味になります

-k
   1024バイト単位でブロックサイズを表示します。-hとか付けると効果がなくなります

-m
   ファイルをだらだらっとカンマ区切りで表示します

-p
   ディレクトリの後ろに/を付けます。そういえば、あなたのデフォルトのlsの動作はどうでしたっけ？ [#ls-p]_

.. [#ls-p] 読者をゆさぶる筆者の図。多分口元が緩んでいるかもしれないし、そういえば自分のlsの動作ってどうっだったっけ？と自分ではまっている

-x
   たくさんのファイルが入っているディレクトリを表示したとき、横方向にファイルをソートします。

-T cols
   横に並べるファイルの数を指定。 -T 1 にするとファイルの一覧が改行されずに1行で表示しようとするので画面が崩れること請け合い

-w cols
   横方向にどれだけ表示するか。-w 1とかすると-1と同じ効果 [#ls-w]_

.. [#ls-w] マニュアルには引数ないことになってるけど、実際は必要

タイムスタンプの表示形式
^^^^^^^^^^^^^^^^^^^^^^^^

--time-style=style
   タイムスタンプのフォーマットを指定できるよ！やったね！ [#ls-time-stamp]_

.. [#ls-time-stamp] ふえぇ、先生！使いどこが分かりません！

ファイル名の表示形式
^^^^^^^^^^^^^^^^^^^^

-b 
   例を見てみましょう

   .. code-block:: sh
      
      $ touch Ctrl-v Enter # ctrl を押しながら
      $ # v を押しキーボードから手を離す
      $ # 一呼吸おいてEnterを押す。さらにもう一度Enter
      $ ls
      ?
      $ ls -b 
      \r

   ファイルの消し方は自分で考えてね！

-N
   ファイル名をクオートしません。危険が危ない

-q
   改行とか表示できない文字を?で表示。デフォルトの動作です

-Q
   ファイル名を""で囲みます

--show-control-chars
   表示できない文字もそのまま表示します。デフォルトの動作です




dir
~~~
``ls -C -b`` と同じ。

vdir
~~~~
``ls -l -b`` と同じ

dircolors
~~~~~~~~~
lsのカラー設定 [#dirc]_ 。呪文なので唱えて下さい。実行方法が特殊

.. [#dirc] ぶっちゃけた話、実機のコンソールに入ることは滅多にないのでsshクライアントで色を設定すればよくね？とは思っている。え？Mac?自分で何とかして下さい...

.. code-block:: sh
   
   $ eval "$(dircolors [option]... [file])"

-pオプションで設定を見ることが出来ます。


おわりに
--------
10章まで説明したところでデッドラインが来てしまいました [#core-17]_ 。
必要なときにしか読まないマニュアルをあえて解説するという暴挙にでました。筆者がよく使っているコマンドがよくわかりますね [#core-owarini1]_  [#core-owarini2]_ 。
打ったことないコマンドがあれば、是非打ってみて下さい。世界が広がります。
もしかしたら、今行っている作業が簡略化できたり、組み合わせることによってこれまで出来なかったことが出来るようになります。突然の仕事にも、効果があるかもしれません [#core-warini3]_ 。
もし次回があれば、11章 ``cp`` から、26章 ``seq`` までです [#textbook]_ 。宿題として、先月の最終日の日にちを出すコマンドを用意しておいてください。

最後に、このコマンドを俺が一番うまく使えるんだ！という Tips をお持ちの方、この環境だとこの辺でこけるといった検証報告をお持ちの方、この説明違うよ!全然違うよ!!ということを思われた方は、筆者 [#hissya]_ まで連絡を頂けると大変ありがたいです。

.. [#core-17] 実は17章まで書いてました
.. [#core-owarini1] 各セクションの分量的な意味で
.. [#core-owarini2] サンプルのコマンドは、実際に仕事で使っているものが多いです
.. [#core-warini3] 効果は個人差があります
.. [#hissya] [連絡先] https://twitter.com/tboffice または、 tbofficed@gmail.com まで
.. [#textbook] 教科書みたいだな


知識に差が出る!? Coreutils 大全 #2
****************************************

はじめに
========
また、お会いしましたね。 [#core-mata]_

.. [#core-mata] あのCM、フジテレビでしたっけ？あ、年がばれますね

ごあいさつ
==========
@tboffice [#twitter-tboffice]_ でございます。前号 [#core-zengou]_ に引き続き、Coreutils [#coreutils-url]_ の解説 [#core-kaisestu]_ をしてまいります。前回は Coureutils の 1章から10章まで取り上げました。今回は、11章の「Basic operations」から26章の「Numeric operations」まで一気に駆け抜けていきたいと思います [#core-27]_ 。

.. [#twitter-tboffice] https://twitter.com/tboffice
.. [#core-zengou] MagicMirrorというサークルが発行した、「ななかInside vol.2」のことです
.. [#coreutils-url] http://www.gnu.org/software/coreutils/
.. [#core-kaisestu] 超訳ともいう
.. [#core-27] 実は28章以降もあるのですが、チュートリアルや細かい仕様などが書いてあって冗長になってしまうため今回は取り上げません。え？本当は読むの面倒だからだって？一理ある

* 「だーくふれいむますたー！」「あのころのきおくをけすにはどうやるです？」
* 「イエッス！アスミス！」
* 「ここはどこ？わたしはだあれ？」
* 「せんせい！そいんすうぶんかいがしたいです！」 [#core-yousei]_ 

.. [#core-yousei] 今季のアニメで突出したキャラクラーがいなくて、また妖精さんをお借りしちゃいました

普段linuxを使っているけど、このコマンド知らなかった、このオプション知らなかった、こんな使い方ができるのか、という発見が一つでもあれば幸いです。筆者がよく使うコマンドや Tips も載せました。それでは、深遠なるCoreutilsの世界へようこそ。

注意
============
Coreutilsのバージョンで使えないコマンドやオプションがあります。また、筆者が検証した環境は さくらのVPS CentOS 5.7 [#core-sakura]_ と value-server [#core-value-server]_ の CentOS 6.4 です。コマンドのサンプルは実際に実行して試していますが、実際に使うときは誰にも迷惑をかけないところで検証して、コマンドの意味を分かった上で使って下さい。
あと、前期のアニメとかみていると、楽しめるかもしれません。さらにアラサーに近づいたきた筆者が、これまでみてきたアニメーションの出てくるセリフなどがいたるところにちりばめられております。わからないものはわからないと、と割り切っていただけるとより楽しめるかもしれません。

.. [#core-sakura] http://vps.sakura.ad.jp/ メモリ容量1Gを使っています。root権限がある仮想専用サーバです
.. [#core-value-server] http://www.value-server.com/ エコプランを使っています。共用サーバです。ただしスペックがめちゃめちゃ高いです


Coreutilsとは
=============
``ls`` や ``cat`` といった、linuxでは欠かせないコマンドをまとめたパッケージです [#core-lscat]_ 。

.. [#core-lscat] ``ls`` や ``cat`` コマンドは前回(Cooreutils大全#1)で登場しました

本稿の構成
==========
Coreutilsのマニュアル [#coreutils-manual]_ の通りにコマンドを並べて解説します。今回は、11章の「Basic operations」から始まります。

.. [#coreutils-manual] http://www.gnu.org/software/coreutils/manual/

基本的操作
==========

cp
---
ファイルやディレクトリをコピーします。コピーするだけなら問題ないんですが...というところ。細かい仕様を把握しておかないと事故が起きるので [#cpa]_ 、もし本番環境でやるなら事前テストすることをおすすめします。とくに、 ``*`` や、末尾 ``/`` のあるなしで効果が変わります。
さて、もう少し細かい挙動を見て行きましょう。マニュアルいわく、デフォルトだとディレクトリーはコピーしないけど、-R,-a,-rオプションをつけると、ディレクトリもコピーするようになるよ、だそうです。シンボリックリンクからコピーするときは、そのシンボリックリンクしかコピーしないけど、--archive(--a),-d,--dereference(-L),--no-dereference(-P),-Hオプションがあるとデフォルトの設定を上書きしちゃうよ、とのこと。

オプションを解説します。

-a,--archive
  ファイルの属性と構造をそのままコピーします。というのも、デフォルトでは、コピーしたファイルは、コピーした時点のタイムスタンプになります。

-b,--backup[=method]
  バックアップオプションです。上書きや削除が発生する場合に使います。-bの場合は引数を取りません。

-d,--no-deference
  シンボリックリンクをコピーするとき、シンボリックをコピーします。ハードリンクの場合も同じくハードリンクとしてコピーします

-f,--force
  コピー先に同じファイルがあっても上書き...と思いきや実際の解説はこうなっています [#core-cp-f]_ 。コピー先の削除またはアンリンクするために、ファイルを開こうとします。それができない場合、削除とオープンを再度試します

-H
  コマンドで指定されたすべてのシンボリックリンクを辿ります

-i,--interactive
  インタラクティブです。ファイルを上書きするとき、上書きするかどうか聞きます。環境によっては、 ``alias cp -i`` されています。逆にうざかったりします

-l,--link
  ハードリンクをつくります。ディレクトリは指定出来ません

-L,--dereference
  シンボリックリンクをすべて辿り、それが指しているファイルやコピーを上書きします

-n,--no-clobber
  上書きしないオプションです。-nの前に-iオプションがあった場合は-iオプションを無効化します

-P,--no-dereference
  日本語のmanpage [#core-cp-P]_ と説明が食い違っているのは内緒にしておきましょう。原文では、シンボリックはシンボリックとしてコピーするとあります

-p,--preserve[=attribute_list]
  ファイルの属性を保ちつつコピーを行います。 ``-p`` オプションで、すべての属性を保ちます。ファイルのオーナー、タイムスタンプなどコピー時に変更しない属性(attribute_list)を選択できます。例えば、 ``cp --preserve=ownership,timestamp origin copyfile`` といった感じです。逆にこの属性は保存しなくてもいいや！というときに、 ``--no-preserve[=attribute_list]`` というオプションもあります。

-R,-r,--recursve
  ディレクトリを再帰的にコピーします。-Rであっても-rであっても効果は同じです

--reflink
  copy-on-write(COW)を使えるシステムであればCOWを使います。詳細はwikipediaで

-s,--symbolic-link
  ファイルに対してシンボリックリンクを作成します。ディレクトリのシンボリックリンクは作ることができません。 ``ln -s`` の威厳は保たれました。あ、あとシンボリックリンクをサポートしていないシステムでエラーが出るかも(・ω<)

-u,--update
  修正時刻がコピー元と同じかそれより新しい場合、コピーをしません

-v,--verbose
  verboseです

.. [#cpa] すでに存在するディレクトリの中に、コピーするディレクトリのファイルをぶちまけて混ざる事案や、シンボリックリンクを考慮するかしないか事案など
.. [#core-cp-f] 日本語manpageとcoreutilsを適当に混ぜあわせて解説を書いてます
.. [#core-cp-P] http://linuxjm.sourceforge.jp/html/gnumaniak/man1/cp.1.html 日本語ドキュメントでは、-Pと--parentが同じであると書かれていました。試してみたところ-Pオプションについては、原文が正しい模様。--parentオプションの説明としては合っていました

dd
--
ファイルのコピーとか変換とか行います。ファイルと言っていますが、デバイスにも対応しています。よくあるディスクのコピーはこんな感じ

.. code-block:: sh
   
   # dd if=/dev/sda1 /dev/sdb1


「変換」はどこいったんじゃ！というツッコミもあるかと思いまして、例を挙げます。textというファイルを入力に使います。

.. code-block:: sh
   
   $ dd conv=ucase if=text of=test2

これでtextの中身のアルファベットが大文字になります！やったね！！ [#dd]_ 

.. [#dd] ucase以外にも、ebcdicやibmといったオプションもあります



install
-------
ファイルの属性を指定しつつファイルをコピーすることが出来ます。このコマンドを使うときが来たらmanを見ましょう。


mv
---
ファイルの移動を行います。副次的な作用としてファイルの名前を変えることが出来ます。cpのオプションと似ていますので、細かい説明は省略します。

rm
---
「あのころのきおくをけすにはどうやるです？」という妖精さんからの質問にはこう答えましょう。過去にだーくふれいむますたーであった頃の黒歴史を消去するコマンドです [#rm-k]_ 。

.. [#rm-k] 黒歴史をバージョン管理していたら別

前回 ``ls`` コマンドの説明の時に作った、改行コードがファイル名になっているファイルを消してみましょう。
 
.. code-block:: sh
   
   $ ls -b 
   \r
   $ rm Ctrl-v Enter # ctrl を押しながら v を押しキーボードから手を離す
   $ # 一呼吸おいてEnterを押す。さらにもう一度Enter


.. topic:: rm -rf /

   一般ユーザでスクリプトを実行したとき、空の変数$hogeを対象に ``rm -rf $hoge`` ってやってユーザディレクトリの中身を消すってことは、たまにあります。手動で実行する機会はめったにないとは思いたいところではありますが、不運にしてrootで ``rm -rf /`` を実行してしまった場合、どうなるかについて。
   突然シャットダウンするといったことはありません。/procディレクトリが残るようです [#core-rmrf]_ [#core-rmrf-ref]_ 。
   さて、突然の ``rm -rf /`` を防ぐにはどうするかというと、rmのaliasに ``--preserv-root`` をつけておきましょう。ついでに、safe-rmというソフトウエアがあります。これは、rmのラッパであり、システム的に消してはいけないディレクトリを消そうとするとメッセージが現れ消さずに済みます。

.. [#core-rmrf] 筆者も実際にVMware上で ``rm -rf /`` をやったことがあります。コマンドが実行できないだけでOS自体は起動している状態でした
.. [#core-rmrf-ref] 参考 http://katsu.watanabe.name/doc/rmrf/

.. topic:: rm undo

   いやー、気持ちは分かるんですけどね。わかりますよ。非常によくわかります。undoみたいなコマンドを打てば元通りにして欲しいですよね？大丈夫です。自分でコマンド作ってください。というのは半分冗談で、現実的な答えとしては、ゴミ箱を作ることです。ゴミ箱ディレクトリを作って、mvにエイリアスを貼ります。 ``alias rm='mv --target-directory=$HOME/.Trash'`` などとします。
   結論をいうと、バックアップ取れ！これに尽きます。

.. topic:: ext3grep
   
   ext3grepというツールがあります。ext3ファイルシステムから文字列をgrepしてくれます。公式ドキュメントいわく、「unmount the partition ASAP ; do not mount it again.」だそうです。ん？バイナリファイル復活させたい？がんばれ！


shred
------
爆ぜたり弾けたりしていた黒歴史を強力に清算するコマンドです [#core-chu2]_ 。ファイルやファイルシステム(/dev/sda3など)を引数にとり、何度も上書きを行って黒歴史を清算し、復元される可能性を減らします [#shred]_ 。

.. [#core-chu2] 劇場版があるんですって？劇場版でも爆ぜたり弾けたり…あー、リア充爆発しろ、の方向ですかね。末永く爆発して欲しいですね（おっさん脳
.. [#shred] ただし、人々の記憶には残っているでしょう。物理破壊がより有効です（ハードディスクのことです


スペシャルファイルタイプ
========================
シンボリックリンクやFIFO、ディレクトリなどのファイルの操作を行います。


link
-----
linkシステムコールを経由してハードリンクをつくるコマンドです。


ln
---
ファイル間にリンクをつくるコマンドです。ファイルやディレクトリに対して、ハードリンクや、シンボリックリンク(-sオプション)を作ることができます。
一つ付け加えることとして、シンボリックリンクの上書きオプション(-f)があります。ディレクトリの場合、上書きできず、シンボリックリンクディレクトリの下にシンボリックリンクが出来ているというオチが待っています。

そのほかのオプションとしては、シンボリックリンクからハードリンクを作成するオプションというのがありましたが誰得感強いです。


mkdir
-----
ディレクトリを作ります。押さえておくべきオプションは二つ。パーミッションを指定する ``-m`` 、存在しない2階層以上のディレクトリを作る ``-p`` です [#mkdir]_ 。

.. [#mkdir] 自分がつくったディレクトリにchmod -x とかしちゃ駄目だぞ！おっちゃんとの約束だ！

mkfifo
------
名前付きパイプを作ります。パイプとは、 ``|`` です [#mkfifo]_ 。

.. [#mkfifo] これは名前なしパイプ(unnamed pipe)というらしい

具体例を示します。

.. code-block:: sh
   
   $ mkfifo pipe
   $ ls -l > pipe & ; cat < pipe

2行目のコマンドは、わざとワンライナーで書いていますが、別のセッションで試すと感動が増します。 ``;`` の前後のコマンドを逆にしても動作します [#mkfifo-cite]_ 。

.. [#mkfifo-cite] "Introduction to Named Pipes" http://www.linuxjournal.com/article/2156

mknod
------
FIFOや、キャラクタースペシャルファイル、ブロックスペシャルファイルを作ります。
キャラクタースペシャルファイルとは、キーボードやマウスなどの入力や出力を扱うファイルです。キャラクタースペシャルファイルは1バイトずつの読み出しですが、ブロックスペシャルファイルはある程度の塊としてデータを取り扱います。

下記、一番はじめの b がブロックスペシャルファイル、 c がキャラクタースペシャルファイルです。それぞれハードディスク、zeroです [#mknod-g]_ 。

.. code-block:: sh
   
   $ ls -l /dev/hda
   brw-rw---- 1 root disk 3, 0  May 22  2012 /dev/hda
   $ ls -l /dev/zero
   crw-rw-rw- 1 root root 1, 5  May 22  2012 /dev/zero 

.. [#mknod-g] なんかこう、目を合わせたら命令されそうですけど。zeroだけに原宿に戻せって。HAHAHA


readlink
---------
シンボリックリンクを引数に与えると、絶対パスを表示します。もしもつかうときがやってきたら使ってみて下さい。

rmdir
-----
空のディレクトリを削除します。 普段は ``rm -rf`` を使うところ。なお、 ``--ignore-fail-on-non-empty`` オプションをつけることによって、中身の入っているディレクトリでもエラーを返さず、削除もしません [#core-rmdir]_ 。

.. [#core-rmdir] 本誌の記事を執筆しているmtgto氏によると、ホームディレクトリで、 ``rmdir --ignore-fail-on-non-empty .ssh`` を実行したところ、警告もなくコマンドが終わってしまって.sshディレクトリが消えてしまったと錯覚する事案が発生したとのこと。みなさんも気をつけましょう

unlink
------
システムが提供しているunlinkを使ってファイルを削除します。

ファイルの属性を変更
====================
chown
-----
ファイルのオーナーとグループを変更します。 ``--reference=filename`` でfilenameとそっくりのオーナーとグループになります。シンボリックリンクを追うかどうかのオプションもあり。ファイルのオーナーを変えるので基本的にroot(あるいはsudo)で操作。ちなみに、ownerとgroupのセパレータは ``:`` が一般ですが、筆者は ``.`` 派。

chgrp
-----
ファイルのグループを変更。こちらにも  ``--reference`` オプションがあります。

chmod
-----
ファイルのパーミッションを変更します。set-group-IDとか使わないから忘れてしまったなぁ。

touch
-----
呼吸を止めて一秒なコマンドです [#touchk]_ 。ファイルのタイムスタンプを変更するコマンドです。オプションを使えば、ファイルのatime,mtimeを任意に変更することが出来ます。ただし、時間の指定の方法は覚えるしかないです [#touch]_ 。ここでも ``--reference`` オプションが使えます。

.. [#touchk] 違います
.. [#touch] dateコマンドの日付フォーマットとも違っていて若干もにょる
 

ディスク容量
============
原文曰く、ディスクは無限のデータ容量を保持できない、だそうです。確かに無限の容量があったら必要ありませんね。duくらいは残して欲しいところ。将来、dfコマンドをたたく必要がなくなる日は来るのか。

df
--
ディスクの空き容量を示します。よく使うオプションは、 ``df -h`` です。ディスクの使用量、空き容量がGBやTB単位で出ます。たまに使うオプションは、 ``df -i`` です。inodeの使用量を表示します。ファイルをフォーマットするときにinode数が足りるかどうか、心にとめておくといいことがあるかもしれません。そして、inode枯渇問題はしばしば深刻な問題を引き起こします。
ファイルシステムの形式(ext3やtmpfsなど)を表示するときは、 ``df -T`` とします。

du
--
カレントディレクトリにあるファイルのサイズをすべて表示します。 ``du -h`` さえ覚えていればなんとかなります。
個々のファイルサイズはいらないよ、というときはsummarizeオプションをつけて ``du -hs`` で所望の結果。筆者がよく使うコマンドは、 ``du -h /home/*`` して、誰が一番ディスクを使っているかランキングをとることです。

stat
-----
ファイルが作られた日時や編集された時間を表示するコマンド、と思いきや、ファイルのあらゆる属性を表示するコマンドです。と、思いきやほとんどlsで事足りるのでした。statでとれる属性は、割り当てられているブロックサイズやinode番号、atimeのエポックタイム数値などが取得できます。API的に取得するにはちょうどいいコマンドです。


sync
-----
メモリにバッファされているデータをディスクに書き込みます。サーバを ``shutdown`` する前に ``sync; sync; sync`` するという文化で年齢が分かるかもしれません。

truncate
--------
ファイルのサイズを減らしたり増やしたり。ボクと契約して10Mのダミーファイルを作ってよ！と言われても慌てず騒がず ``truncate -s 10M file`` して提出して下さい [#truncate]_ 。

.. [#truncate] [問題] 提出したデータの中身はどうなっているでしょうか


文字を表示
==========
文字列を表示するコマンドです。

echo
----
与えられた文字を標準出力に書き出します。デフォルトだと、最後に改行が入るので、ハッシュ値を作るときには注意して下さい。改行が入らないようにするためには、 ``-n`` オプションを。 ``\n`` (new line) といった特殊文字を出力するためには下記のように。

.. code-block:: sh
   
   $ echo -e "a\nb\nc"
   a
   b
   c


printf
------
C言語のprintfに似たフォーマットで文字列を出力します。たとえばこんな感じ

.. code-block:: sh
   
   $ printf "%d" "'a"
   97


yes
---
Ctrl-c(kill)が押されるまで、文字列を延々と表示します。最後はkillされる宿命なので、終了コードは必ず1になります。「イエッス、アスミス」はこのようにしてください

.. code-block:: sh
   
   $ yes asumisu

yesをインタラクティブに求めるコマンドの入力として使用することが…あまりありません。たとえば ``yes | rm -i files*`` 。


条件
====

false
-----
何もしない、成功しない。

.. code-block:: sh
   
   $ false 
   $ echo $? 
   1

true
----
何もしない、成功。シェルスクリプトのif文で、何もしないときに使います。そのときは、trueと同じ意味のビルトインコマンド ``:`` で代用することがあります。


test
----
コマンドの戻り値を判定して条件分岐します。コマンドとしては、 $ test ``expression`` や、ビルトインコマンドとして [ ``expression`` ] が利用できます。expressionについては、shellのマニュアルに書いてあります。指定されたファイルが存在するか、数値の大小比較などができます。

.. code-block:: sh
   
   $ HOGE=str
   $ if [ "xstr" = x$HOGE ] ; then echo $HOGE ; else ; \
   echo $HOGE is not str ; fi 
   str

HOGEという変数がstrかどうかを比較するサンプルです。もし、xがなくて、$HOGEが空だと ``[ str = ]`` となってしまい、syntax errorになるので慣習としてxを付けています。 ``[]`` の返値が1か0で条件分岐します。つまり、 ``[ "xstr" = x$HOGE ]`` というコマンドが実行可能です。

expr
----
式を評価します。といっても最近はもっぱら ``$()`` や ``$(())`` を使っています。例は、joinの時に出てきています [#core-join]_ 。括弧二つの方は何となく数値計算ができるので電卓代わりに使っています。 ``echo $((12*34))`` といった感じです [#core-expr]_ 。

.. [#core-join] 前号を参照してください
.. [#core-expr] そして始まる bc との宗教戦争

リダイレクション
================
シェルのリダイレクションです。コマンドとしては1個しかないとはこれいかに [#redi]_ 。

.. [#redi] ``|`` や ``>`` はシェル組み込みなので、しゃーなしだな

tee
----
出力を複数のファイルやプロセスに渡すコマンド。teeはTのことで、T型に出力という意味です [#teea]_ 。
コマンドの結果をファイルに書き込むときよく使うリダイレクション ``> file`` のとき、何が出力されるのか、別の端末を開いてtailするまで分かりません。ファイルにも書きつつ、標準出力にも出して欲しいとき使います。
実は前回の ``join`` のサンプルのところで出てきているのでサンプルはそちらを参考にして下さい。なお、 ``-a`` オプションはファイルへの追記を意味しています。

.. [#teea] Tの字形をみるとわかってくる

複数のファイルやプロセスに渡せるということなので、こんなコマンドも実行可能です。ファイルをダウンロードして標準出力に投げて、sha1sumとmd5sumでハッシュ値をとり、dvd.isoにダウンロードしたファイルを書き出し。

.. code-block:: sh
   
   wget -O - http://example.com/dvd.iso \
     | tee >(sha1sum > dvd.sha1) \
           >(md5sum > dvd.md5) \
     > dvd.iso


ファイル名の操作
================
ファイル名の操作をします。

basename
--------
ファイル名からディレクトリや拡張しを取り除きます。

.. code-block:: sh
   
   $ basename /usr/local/bin/sh  
   sh

スクリプトの中で、 ``basename $0`` と書くとそのスクリプト自身のファイル名が表示されます。ついでに、 ``basename $0 .sh`` と書くと、.shを除いたファイル名が表示されます。

dirname
-------
ファイル名やディレクトリパスを引数にとり、ファイル名の最後の一部を取り去ります。実際には、ファイルパスの最後のスラッシュを取り去る挙動をします。ファイルがあるかどうかのチェックはしていません。

.. code-block:: sh
   
   $ dirname /usr/local/bin/
   /usr/local/bin
   $ dirname /usr/local/bin/bash
   /usr/local/bin
   $ dirname /usr/local/bin/hoge
   /usr/local/bin # !?
   $ dirname /etc/etc/etc
   /etc/etc # うーん



pathchk
-------
ファイル名のSAN値をチェックします。正確には、ファイル名を引数にとって、ファイル名をほかのシステムに持って行っても大丈夫かどうかチェックします。意訳すると、こんな感じです:

* パーミッションがまずくてディレクトリの中身がみることができない
* ファイル名長すぎ

.. code-block:: sh
   
   $ pathchk a<snip>a
   pathchk: a<snip>a: File name too long


mktemp
------
一時的な空のファイルやディレクトリを作ります。bashスクリプトを書くときに、使った方がいいけど、使わなくても何とか書ける、といったコマンドでしょうか。既存のファイルを重複しないファイル名やディレクトリを作ってくれます。Xと書くと [#core-mktemp]_ その部分に適当な文字をあてがってくれます。

.. [#core-mktemp] Xは3文字以上じゃないと怒られるので注意

実際に使うときはこんな感じかなぁ

.. code-block:: sh
   
   $ TMPFILE=$(mktemp hoge-XXXXXXX.txt)
   $ echo $TMPFILE
   hoge-82TiSmn.txt

その他オプションは下記の通り

-u XXX
  XXXの長さだけ、ある程度ランダムな文字を表示します

-d XXX
  ディレクトリを作ってくれます

-q
  ランダム文字を表示します。ファイルは作られません

-p dir
  dirディレクトリの下にファイルを作ります

realpath
--------
相対パスやシンボリックリンクを絶対パスに直すらしいです。らしい、っていうのは実行環境が手元にないから！ [#core-realpath]_ [#core-realpath2]_ 

.. [#core-realpath] 女子高生とか　好きだから！  by 木村先生
.. [#core-realpath2] どさくさにまぎれて何を言っているんだ。これは・・・部屋の暑さがなせる技・・・気温33℃らしい


コンテキストさん＠がんばらない [#core-hataraku]_
=============================================


Working contextを訳してみたらこうなった。もはや訳ではない。見なかったことにしよう [#core-cont]_　。まうまう [#core-maumau]_ [#core-contexa]_ 。

.. [#core-hataraku] 「はたらくコンテキストさま！」でもよかった。今はどっちでもよかったと思っている、などと供述しており…
.. [#core-cont] 超法規的措置。というセリフはあまりにも有名。だと思う。一応解説すると、BPSバトルプログラマーシラセというアニメがありまして。もう10年前か
.. [#core-maumau] 一説には「間に合う、間に合う」の略であるとも言われている(ニコニコ大百科より)。この原稿もまうまう言って書いてます
.. [#core-contexa] 某所の邦訳を見てみると「作業中の状況」となっており、まあ、だいたいあってる


pwd
---
「ここはどこ？」コマンドです。今いるディレクトリを表示します [#core-pwd]_ 。もうこれ以上説明しなくちゃダメカナ？ダメダヨ？

.. [#core-pwd] Print Working Directory

オプションは下記2種類。

-L
  --logicalと同じ。pwdのデフォルトの動作と覚えておけば不都合はなし

-P
  --physicalと同じ。シンボリックリンクをたどる。つまりこんな感じ

.. code-block:: sh
   
   [sasamisan@ganbaranai]/var/log/httpd% pwd -L
   /var/log/httpd
   [sasamisan@ganbaranai]/var/log/httpd% pwd -P
   /usr/local/apache2/logs


stty
----
端末のキャラクターを表示したり変更したりするコマンド。端末ってなんかこう、最初その単語を聞くとイメージわかないんだよね―。イメージすべきは役所に設置されている住民票発行装置。あるいは銀行のATM。つまり、とあるサーバの画面を離れたところにある画面に表示させているというイメージ。表示させて且つ操作することができます。パソコンに画面つなげて表示して操作するのも端末、sshでリモートログインしているときも端末 [#core-stty-tanmatsu]_ 。筆者はだいたいそんなイメージで端末という言葉を解釈しています。もっと年のいったおっさんが説明すると、もうちょっと古い端末を引っ張り出してきてボーとかテレタイプといった話をしだすと思います。

.. [#core-stty-tanmatsu] sshだとエミュレータになりますけどね。端末エミュレーターでぐぐると深い話が垣間見れるのではないでしょうか。ktermとかxtermとか

んでまあ、何が言いたいかというと、その端末の表示を変更するコマンドがこれなんです。
原文を読んでみましょう。ライン設定が与えられていないとき、sttyはボーレートを表示します。え？マジで。

.. code-block:: sh
   
   $ stty
   speed 38400 baud; line = 0;
   -brkint -imaxbel

うお、ほんとだ。baud(ボー)だーー [#core-stty-baud]_ 。

.. [#core-stty-baud] ボーは、搬送波に対する1秒間あたりの変調の回数と定義される(wikipediaより)。そして、1baudは1pbsと一致するかもしれないし、しないかもしれない。詳しくはwikipeれ

中断しちゃいました。続きです。sttyはシステムがサポートしているライン制約ナンバーや ``stty sane`` で設定されている値から変更された設定を表示します。
デフォルトでは、モードを読み込みや設定は、端末上の標準出力で実行されます [#core-stty-p]_ 。--fileオプションで変更可能。

.. [#core-stty-p] よく考えなくても当たり前というかなんというか

sttyはたくさんの引数じゃないオプションがあるよ！めちゃめちゃあるよ！ [#core-stty-many]_

.. [#core-stty-many] 19.2.1から19.2.7まで解説に割かれています

主なオプションは下記です。

-a
  --allと同じです。実行してみましょう


.. code-block:: sh
   
   % stty -a 
   speed 38400 baud; rows 38; columns 79; line = 0;
   intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = <undef>;
   eol2 = <undef>; swtch = <undef>; start = ^Q; stop = ^S; susp = ^Z;
   rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O; min = 1; time = 0;
   -parenb -parodd cs8 -hupcl -cstopb cread -clocal -crtscts -cdtrdsr
   -ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon
   -ixoff -iuclc -ixany -imaxbel -iutf8 opost -olcuc -ocrnl onlcr -onocr
   -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0 isig icanon iexten 
   echo echoe echok -echonl -noflsh -xcase -tostop -echoprt
   echoctl echoke

-F device
  --file=deviceと同じ。deviceに繋げます

-g
  --saveと同じ。ほかのsttyにつなぐため設定を保存しておくオプション

原文には、そのほかにオプションがたくさん載っているので、気になったら見てみましょう。

printenv
--------
環境変数を表示します。それだけです。

tty
----
スタンダートインプット上のターミナルのファイル名を表示します。打ってみましょう。

.. code-block:: sh
   
   % tty
   /dev/pts/0

上記の結果は、さくらのVPSサーバにログインして ``tty`` コマンドを打った結果です。さらに別の端末から同じサーバに入り、同じコマンドを打ってみましょう。

.. code-block:: sh
   
   % tty
   /dev/pts/12

通常ならば、1になります。ここのサーバでは、 ``screen`` が立ち上がっていて、1から11まで使っていました。つまり今回は、12に割り当てられました。詳しくはスペシャルデバイスファイルでぐぐってみましょう。


進撃のユーザインフォメーション
===============================
「user infomation」だそうです [#core-userinfo]_ 。coreuitlsマニュアルの20章に突入しました。

.. [#core-userinfo] なんでもかんでも進撃っていれればいいってもんじゃねーだろ！！だってこのへんしか入れるとこなかったんだもん！！！わかった　この話はやめよう ハイ!! やめやめ

id
--
ユーザのidを表示します。打ってみましょう [#core-id-a]_ 。

.. [#core-id-a] value-serverでの結果。16人目のユーザなのかもねー。ちなみに、本当に「hoge」というユーザでユーザ名を作りました

.. code-block:: sh
   
   $ id 
   uid=10016(hoge) gid=20000(hpusers) groups=20000(hpusers)

筆者がこのコマンドを使うときは、あのユーザwheelに入ってたっけ？と確認するときに使います。たとえばこのような感じ

.. code-block:: sh
   
   $ id ellen_jeager
   # 結果省略


なお、オプションは以下の通り

-g
  --groupと同じ。グループIDを表示します

-G
  --groupsと同じ。グループidと補助グループidを表示

-n
  --nameと同じ。ID番号じゃなくて名前で表示。-uか-g、または-Gが必須

-r
  --realと同じ。ID番号じゃなくてrealで表示。-uか-g、または-Gが必須。実行してみたけど、id番号しかでてこなかったぜ

-u
  --user と同じ。ユーザIDのみを表示

-z
  --contextと同じ。セキュリティーコンテキストを表示。SELinuxが無効になっていたら警告を表示してreturn 1する。

所属しているグループは、ログインした後に変更を加えても、今接続しているセッションには適用されないよ！ログインし直すと適用されるよ！と書いてあります [#core-id-hoge]_ 。

.. [#core-id-hoge] かなり意訳


logname
-------
現在のログイン名を表示します。utmpファイル [#core-logname-utemp]_ から情報を読み出します。このファイルは、システムの現在の状態のすべてのアカウント情報を管理していて、システムが起動してからの時間 [#core-logname-uptime]_ や、システムイベントやユーザのログイン、ログアウトの情報が記録されています。オプションは、 ``--help`` と ``--version`` のみです [#core-logname-ver]_ 。

.. [#core-logname-utemp] /var/run/utmp か /etc/utmp にある
.. [#core-logname-uptime] uptimeコマンドが使う
.. [#core-logname-ver]  ``--version`` を打ってみたら、「Written by FIXME: unknown.」とでた。どうしよう…

whoami
------
わたしはだあれ？コマンド。現在のユーザidに関連づけられているユーザ名を表示します。同じコマンドは、``id -un``。

groups
------
所属しているグループ名を表示します。打ってみましょう。引数にはユーザ名を入れます。

.. code-block:: sh
   
   $ groups hoge root
   hoge : hpusers
   root : root wheel rvm

``id -Gn`` が同じコマンドです。ついでに ``id`` のところと同じ注意書きが書いてあるのはなんなんだぜ。


users
-----
現在ログインしているユーザの名前を表示します。実行してみましょう。

.. code-block:: sh
   
   % users
   fairy fairy fairy fairy fairy fairy fairy fairy fairy fairy fairy fairy fairy fairy


妖精さんだらけーーー [#core-users-f]_ 。

.. [#core-users-f] はみ出してるし。本当は自分の名字が並んでいただけでした。それだとおもしろくないので妖精さんを並べてみました。英語表記これであってるのかしら。無難に yo-say-san とかにしておいた方がよかったかも？生足魅惑のマーメイド？？つまり上半身は魚？？？妖精さんの上半身は魚…ッ　ざわ・・・ざわ・・・


who
---
現在ログオンしているユーザの情報を表示します。コマンドの例は下記です。

.. code-block:: sh
   
   who [option] [file] [am i]

原文をよく見ると、「am i」だけ斜体になってないんですよね。ということで実行してみましょう

.. code-block:: sh
   
   % who am i
   chiba    pts/11       2013-06-23 17:57 (:pts/12:S.10)

だいたい実行結果が見えてきたところで、オプションです。

-a
  --allや ``-b -d --login -p -r -t -T -u`` と同じです

-b 
  --bootと同じです。システムが最後に起動した日時を表示します。uptimeだと起動してからの時間が表示されます。意外と便利かも

.. code-block:: sh
   
   % who -b
   system boot  2012-12-14 05:16

-H
  --headingと同じです。表示の際にヘッダをつけます

-l
  --loginと同じです。訳すのが面倒だったので実際に打つとこんな感じです [#core-who-l]_ 

.. [#core-who-l] value-serverで試していてうすうす気づいていたのですが、これ、物理コンソールにrootでログインしっぱなしになってないですかね

.. code-block:: sh
   
   $ who -l
   LOGIN    tty4         May 14 14:01              5500 id=4
   LOGIN    tty2         May 14 14:01              5481 id=2
   LOGIN    tty3         May 14 14:01              5491 id=3
   LOGIN    tty1         May 14 14:01              5472 id=1
   LOGIN    /dev/ttyS1   May 27 19:30             48033 id=v/tt
   LOGIN    tty5         May 14 14:01              5503 id=5
   LOGIN    tty6         May 14 14:01              5514 id=6

--lookup
   utempに記録されているホスト名からDNSルックアップしようとします。デフォルトでは機能しません。インターネットアクセスをするので表示するまでにちょっと時間がかかるからです。

-m
  ``who am i`` と同じです [#core-who-m]_ 。

.. [#core-who-m] エイリアス張る意味あるの？つまんねー事聞くなよ！


波打ち際のシステムコンテキストさん
=============================

システムコンテキストーーーーーここだーーーーー [#core-syscon]_ 

.. [#core-syscon] やめてーーーーー

date
----
役割は大きく分けて2種類あります。時刻を表示することと、時刻を設定することです。時刻の表示から説明すると思った？残念、時刻の設定でした！ [#core-date-zannnenn]_。

.. [#core-date-zannnenn] 残念さやかちゃん

時刻の設定。よく忘れます::

  date [-u|--utc|--universal] [ MMDDhhmm[[CC]YY][.ss] ]

``-u`` は使う機会はないでしょう [#core-date-u]_ 。6月25日の23時34分45秒に設定したいときはこのように [#core-date-set]_ 

.. [#core-date-u] amazon awsだと引っかかりそうな。と思ったけど、日にちずれてることもないから、どうでもよかった
.. [#core-date-set] 正確な時間がズレまくっていると、ntpdでも合わせてくれないので、だいたい近い日時に合わせましょう。ただし、時間を巻き戻す場合は、アプリケーションで不整合が起きることがあるので要注意。本番環境で気軽にやるなよ!!!

.. code-block:: sh

   $ date 06252334.45

時刻の設定はこのへんにして、単独で実行してみます。

.. code-block:: sh
   
   $ date
   Mon Jun 24 00:34:47 JST 2013

表示形式を変更したり、一ヶ月後といった相対的な日付も出力することができます。オプションをいちいち説明するよりは実例を見たほうが早いです [#core-date-a]_

.. [#core-date-a] 完全に執筆してる時期ばれてますやん

.. code-block:: sh

   $ date +%Y%m%d
   20130624
   $ date '+%Y-%m-%d %H:%M:%S'
   2013-06-24 00:45:11
   % date -d '1 hours ago' +%X                                                                                
   23時20分22秒 # 日本語ロケールの場合こうなる 

基本的な書き方はこれでマスターです。例えば、%Yと書くと今年の西暦である2013を表示、%yで西暦の下二桁、つまり、13を表示します。
気をつけるところは、%が出現する一番最初に「+」の記号をつけること。さもないと、エラーになります。
%に続く文字については、manを見ましょう [#core-date-man]_ 。
次に、-d(または--date)オプションの説明をします。-dには、1時間前や1時間後、明日や先月などを指定することができます。「last month」と書けば、現在の時刻を基準とした先月の日時を表示することができます。適当に書いても結構柔軟に対応してくれます。ついでに指定できる文字列は、first,second,...,twelth,last,this,first,next,tommorow,yesterdayなどです。さて、この後は「21.1.7 Examples of date」を追っていきます。

.. [#core-date-man] %Y%m%d %H%M%Sあたりを覚えておけば、たいてい事足ります

date --date='2 days ago'
  おとといの日付を指定します

date --date='3 months 1 day'
  3ヶ月と1日後の日付を指定します

date --date='25 Dec' +%j
  1月1日から指定日までの日数を表示します

date '%B %-d'
  月の完全名と月を表示します。%Bの部分はロケールによってJulyとか7月などに変わります。%-dの部分は、0埋めをしません。7月6日であれば、6となります。%dだけだと06になります

date --set='+2 minutes'
  現在のシステムの時刻を2分進めます。root権限が必要です。システムの時刻を変更するときは注意だぞ！

date +%s
  1970年1月1日からの秒を表示します [#core-date-epoch]_ 

.. [#core-date-epoch] 俗にいうエポックタイム。-dで日付を指定すればその時点のエポックタイムを表示します

date -d @946684800                                                                                              
  1970年1月1日から経過した秒数を理解しやすい感じで表示してくれます [#core-date-epoch2]_ 

.. [#core-date-epoch2] Coureutils 5.3.0から機能です。これ以前だと、 -d '1970-01-01 UTC 946684800 seconds'とする


そういえば、前回、こんな宿題を出しました。「先月の最終日の日にちを出すコマンドを作ってください」というものです。ここで答えを書いてしまうとすぐ見えてしまうので、この記事の一番最後に載せました。

.. topic:: dateとcrontab

   crontabに ``date +%Y%m%d`` と書くと正しく動作しません。 ``%`` をエスケープしないといけないんだよ、な、なんだってーΩ ΩΩ。実際にその罠に陥っている人に遭遇したことがあります。 ``date +\%Y\%m\%d`` と書きましょう。これで動く！


arch
----
``uname -m`` と同じ。実行してみましょう [#core-arch-a]_ 。

.. code-block:: sh

   $ arch
   x86_64
   $ uname -m  
   x86_64


.. [#core-arch-a] $ strace archしてみたら、uname呼んでた。それだけ

nproc
-----
有効なプロセッサの数を表示します。実行してみましょう [#core-nproc]_ [#core-nproc-a]_。

.. code-block:: sh

   $ nproc
   32

.. [#core-nproc] value-serverでの実行結果。こんなサーバなかなかお目にかかれないなぁ。/proc/cpuoinfo見てみたら、本当にCPUが32個あった
.. [#core-nproc-a] ついでに、このコマンド事態はcoreutils 8.4あたりの比較的新しいバージョンに入っているみたい。CentOSの5あたりだと入ってないかも

uname
-----
現代語訳すると「coreutilsの作りしコマンドよ、我が前にシステム情報を表示せ、uname」になるんですかね [#core-uname-a]_ 。実行してみましょう [#core-uname-b]_ 。

.. [#core-uname-a] その前に、現代語訳じゃないでしょ。多分。ついでにアニメ始まったの1999年だから15年くらい前だぜ。今思うと十分に中二病ですな、このセリフ
.. [#core-uname-b] 本当は1行で出力されます

.. code-block:: sh

   $ uname -a 
   Linux e2.valueserver.jp 2.6.32-358.6.1.el6.x86_64 
   #1 SMP Tue Apr 23 19:29:00 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux

オプションは下記の通り。

-a
  すべての情報を表示。32bitか64bitが分からなかったらその部分は表示しないよ！

-i
  ハードウエアのプラットフォームの名前(x86_64とか)を表示。カーネルによって情報が作られていないときは ``unknown`` って表示します

-m
  ハードウエアの名前を表示(x86_64とか)

-n
  ネットワークノードのホスト名を表示(e2.valueserver.jp)

-p
  命令セットアーキテクチャとかISAと呼ばれるプロセッサの型を表示。 ``unknown`` だったらオプションの ``-i`` と同じ理由

-o
 OSの名前を表示(GNU/Linux)

-r
  カーネルリリースを表示(2.6.32-358.6.1.el6.x86_64)

-v
  カーネルバージョンを表示(#1 SMP Tue Apr 23 19:29:00 UTC 2013)



hostname
--------
コマンド単体で実行するとホスト名を表示します。ホスト名を変更する場合は、rootユーザで、引数に新しいホスト名を指定して実行します。一旦ログアウトしてログインすると、ホスト名が変更されています。再起動して元に戻ってしまうのを防ぐために、設定ファイルの変更も忘れずに [#core-hostname]_ 。

.. [#core-hostname] hostsファイルにも気を付けておこう

hostid
------
ホスト識別子を16進数で表示します。ホスト識別子ってなんやねん、という人がググってください [#core-hostid]_ 。

.. [#core-hostid] つまり、筆者もよくわかってない

uptime
------
現在の時間とシステムが起動してからの時間と、ログインユーザの数と、ロードアベレージを表示します。ロードアベレージは、1,5,15分の平均値です。

.. code-block:: sh

   $ uptime 
   00:29:45 up 44 days, 10:29,  2 users,  load average: 0.62, 0.69, 0.62

SELinuxコンテキスト
===================

SELinux(Security-Enhanced Linux)の設定を行います。rootに権限が集中することを防ぐシステムの構築を提供します [#core-selinux]_ 。

.. [#core-selinux] wikipediaを参考にしました。ちゃんと知りたい方は調べてください(続きは英語で)

chcon
-----
選択されたファイルのSELinuxセキュリティーコンテキストを変更します。

オプションは下記の通り

--dereference
  シンボリックリンクに影響せず、シンボリックリンク先のファイルに影響します。デフォルトの動作です。

-h
  シンボリックリンクのみに影響します

--reference=rfile
  rfileと同じ設定になります

-R
  再帰的な感じで動作します

-v
  すべてのファイルについて調べて表示します

-u user
  セキュリティーコンテキストをユーザ userに設定します

-r role
  セキュリティーコンテキストをロール roleに設定します

-t type
  セキュリティーコンテキストをタイプ typeに設定します

-l range
  セキュリティーコンテキストをレンジ rangeに設定します

runcon
------
特殊なSELinuxのコンテキスト上でコマンドを実行します。オプションです。

.. code-block:: sh

   runcon context command [args]
   runcon [options] command [args]

-c
  変更する前にプロセス変更コンテキストを計算する [#core-runcon-c]_ 

-u,-r,-t,-l
  chcon のオプションと同じ

.. [#core-runcon-c] Compute process transition context before modifying の訳。ムズイ


変更コマンド
============
いろいろ変更しまっせ。

chroot
------
特定のルートディレクトリでコマンドを実行します。スーパーユーザでのみ実行できます [#cpre-chroot-a]_ 。何がうれしいの？というと、本来ならば、/ディレクトリからのツリー構造になっているものを、任意のディレクトリ(/tmp/chroot/など)を/と再定義したツリー構造に変更することができます。つまり、本来の/は見えなくなります。ソフトウエアのテストなどを行うときに使います [#core-chroot-a]_ 。

.. [#cpre-chroot-a] 例外あり

実行はこんな感じ。

.. code-block:: sh

   chroot option newroot [ command [args] ... ]
   chroot option

.. [#core-chroot-a] 原文に書いてある例を実行してみたんですがうまく動かず。本来だったら/直下の必要なファイルを任意のディレクトリにコピーして実行するものだそうだ。学生のときにやった気がするけどもう忘れた（おい

env
---
環境変数を表示したり、一時的に環境を変数を変更してコマンドを実行します。 ``env`` 単体で実行すると、設定されている環境変数が表示されます。
一時的に環境変数を変更するときの例。/tmp/binにHOGEと出力される実行可能なhogeファイルをおいておきます。

.. code-block:: sh

   env PATH="$PATH:/tmp/bin" hoge
   HOGE

オプションは下記の通りです

-O,--null
  出力時に改行しません [#core-env-O]_ 

.. [#core-env-O] 新しめのバージョンに入っているオプションらしい

-u ``name``
  nameという環境変数を削除します

-,-i,--ignore-environment
  環境変数をすっからかんにして実行します。さっきのコマンドをアレンジしてみましょう。

.. code-block:: sh

   env # まずは実行して様子見
   env - PATH="$PATH:/tmp/bin" env

なんとなく実行結果はつかめましたか？

nice
----
いいね！コマンドです [#core-nice-iine]_ 。nicenessを変更してプログラムを実行します。nicenessって何？いい質問ですね [#core-nice-iine2]_ 。nicenessは、システムで実行されるプロセスがいくつかあってその中でどれくらい有利に実行されるかを決める値です [#core-nice-affects]_ 。

.. [#core-nice-iine] 注意：正しくはlike
.. [#core-nice-iine2] いいね！（言いたいだけだろ
.. [#core-nice-affects] 厳密には違うけど適当な説明ならこれでおっけー！（こらこら

単体で実行すると、現在のnice値が表示されます。-20(優先度高)から19(優先度低)までの値をとります。そしてnicenessはスケジュールの優先度と混同しちゃだめだよー、アプリケーションを実行する順序を決めるよ！優先度とは違って、nicenessはスケジューラーに単に忠告するだけで、無視することもあるよ！(そして原文ではhistrical practiceに脱線)

説明がめんどいので、実行例。数値を与えればそれだけnice値が下がります [#core-nice-san]_ 。

.. [#core-nice-san] SAN値に見えてきた。筆者のSAN値が低いのだろうか(今、会社で原稿書いてます。時間は、もうすぐ丑三つ時)

.. code-block:: sh

   $ nice
   0 # current nice 
   $ nice nice
   10
   $ nice -n 19 nice
   19
   $ nice --10 nice
   nice: cannnot set niceness: Permission denied

niceをつけてコマンドを実行すると、nice値が10になります。 ``-n`` をつけると数値を指定できます。 ``-`` のあとに数値をつけると ``-n 数値`` と同じ効果です。 ``--10`` はマイナス値にしようとしています。マイナス値をつけることはnicenessをあげることになります [#core-nice-santi]_ 。nicenessをマイナス値にするためには、root権限が必要です。

.. [#core-nice-santi] ＼(・ω・＼)SAN値!(／・ω・)／ピンチ!

.. code-block:: sh

   $ sudo nice -n -20 nice
   -20

ちなみに、reniceで実行中のプロセスのnice値を変更することができます。

nohup
-----
hungupシグナルを無視して、引数のコマンドを実行します。ログアウトしたあとでも引き続き実行されます。
標準入力がターミナルのとき、/dev/nullからリダイレクトされます。ターミナルのセッションはコマンドによって使われるターミナルと誤って見なさないようにするためです [#core-nohup-unknown]_。これはGNU拡張で、GNUでないシステムでは、 ``nohup command [arg] ... </dev/null`` として下さい。

.. [#core-nohup-unknown] これを書いている筆者もよくわかってない

標準出力がターミナルのとき、コマンドの標準出力はnohup.outファイルに追記されます。そのファイルに書けない場合は、$HOME/hohup.outに書き、そこもだめだった場合はコマンドは実行されません。nohup.outファイルは、コマンドを実行しているユーザだけが書き込みができ、且つ読み込みができる権限で作られます。umaskを無視します。

標準エラーがターミナルのとき、標準出力に出ます。標準出力が閉じられているときは、上記のnohup.outファイルに追記されます。

例を見ましょう

.. code-block:: sh

   $ nohup make > make.log

ちゃんとバックグラウンドで実行するには、コマンドの最後に ``&`` を置いてね！あと、niceコマンドを使うときは、 ``nohup nice command`` ってやってね！

stdbuf
------
i/oストリームバッファリングを変更してコマンドを実行します。stdbufは、プログラムに関連づけられた3つの標準I/Oストリーム(標準出力、標準入力、標準エラー出力)のバッファリング動作を1つに変更できます。

オプションはもちろん3つ、

-i mode, --input=mode
  標準入力ストリーミングバッファリングを調整します

-o mode, --output=mode
  標準出力ストリーミングバッファリングを調整します

-e mode, --error=mode
  標準エラーストリーミングバッファリングを調整します

modeに指定する文字は下記です

L
  ストリームを行単位でバッファします。このモードでは、新しい行が出力されるか、入力がターミナルデバイスに接続されたストリームから読まれるまで結合します。このオプションは標準入力では使えません。

0
  大文字のoではなく、ゼロです。選択されたストリームのバッファリングを無効にします。このモードでは、データはただちに出力され、要求されたデータの分だけが入力から読み込まれます。入力と出力のための機能の違いに注意してください。入力のバッファリングを無効にすると、応答性やストリーム入力機能のブロッキング動作に影響を与えません。基本的には、要求されたよりも少ないデータを読み取る場合でも、たとえば関数freadの場合はまだ、EOFかエラーになるまでブロックします [#core-stdbuf-0]_ 。

size
  完全バッファモードにおいて、バッファのサイズを明確にします。サイズは整数のあとにKB(1000 KiloBytes)とかK(1024KibiBytes)をつけることができます

.. code-block:: sh

   tail -f access.log | stdbuf -oL cut -d ' ' -f1 | uniq 

このコマンドでは access.log の一意なエントリがあると直ちに出力されます [#core-stdbuf-ex]_ 。

.. [#core-stdbuf-0] google翻訳を借りました。以前見た時よりも翻訳が自然になっていて驚き。そして翻訳された日本語の文章の意味はイマイチ把握できず
.. [#core-stdbuf-ex] 日本語マニュアルからお借りしました

timeout
-------
タイムリミットを設定してコマンドを実行します [#core-timeout]_ 。

.. [#core-timeout] 比較的新しいCoreutilsのバージョンに入っている模様。Cent5には入っておらず、Cent6あたりで使えました


.. code-block:: sh

   timeout [option] duration command [arg] ...

オプションは下記の通り

--preserve-status
  タイムアウトを示す具体的な終了ステータスを返します。どのくらいかかるかわからないコマンドを実行するときに便利 [#core-timeout-miss]_ 

--foreground
  正常フォアグラウンドTTYを使用できるように、独立したバックグラウンドプログラムループを作成しません。これは、コマンドが2つの状況で、対話型シェルから直接起動していないコマンドがタイムアウトをサポートするために必要とされます。2つの状況とは、
  1. commandがインタラクティブで、例えば端末から読み取る必要がある場合
  2. 端末からコマンドを直接送信したい場合、たとえばCtrl-Cなど

-k duration, --kill-after=duration
  監視コマンドは、指定した期間のあとに、KILLシグナルを送ることによってkillされていることを確認します。選択された信号が致命的でないと証明された場合、このオプションを指定しない場合、コマンドをkillすることはありません。

-s signal, --signal=signal
  デフォルトであるTERMシグナルではなく、タイムアウトの時にsignalをコマンドに送ります。signalはHUPや数値で指定します

期間に関しては、小数の後に、s(秒、デフォルト)、分であるm、時間h、日dをとることができます。期間が0の場合、タイムアウトになりません。実質のタイムアウトの期間はシステムの状態に依存します。特に注意しないといけないのは、1秒以内のタイムアウトです。

.. [#core-timeout-miss] 原文にはスペルミスがあるので訳すときは注意。余談ですけど、managed commandってなんて訳したらいいんでしょうね
.. [#core-timeout-foreground] コマンドが2つの状況ってなんでしょうね。バックグラウンドとフォアグラウンドのこと?おしえてエロい人!

プロセスコントロール
====================

この章にはkillしかありません。

kill
----
妖精さん [#core-kill-y]_ (プロセス)にお菓子(シグナル)を与えます [#core-kill]_ 。お菓子(シグナル)にもいろいろあって、それを食べた妖精さん(プロセス)は、消えてみたり、いっぺん寝て起きてみたり、「どうされましたか？」 [#core-kill-NUL]_ などと言ってみたりします。お菓子によってどのような行動をするかは、妖精さんごとに定義されているため、一概には言えません。
killコマンドのデフォルトでは、TERMというお菓子を妖精さんに与えます [#core-kill-term]_  。
お菓子(シグナル)には、番号や名前がついています。HUP(番号だと1) [#core-kill-HUP]_ 、KILL(番号だと9)  [#core-kill-KILL]_ などです。詳細は、Coreutilsのマニュアル、2.5 Signal specificationsに載っています。なお、アクセス権限のある妖精さんにしか効果ありませんのでご注意を。
	
.. [#core-kill-NUL] null signalのイメージ(多分ちょっと違う)
.. [#core-kill] ググってみるとプロセスを強制終了するコマンドという説明を見かけます。これは、正確ではありません
.. [#core-kill-y] 「人類は衰退しました」に登場する新人類の総称です。いまごろ妖精さんの解説がでてくるとは…
.. [#core-kill-HUP] ログをローテートさせるときに使います。apacheのlogrogateであれば
.. [#core-kill-KILL] プロセスを終了させるときに使います。通常「殺す」って言います。なお、このシグナルは、受け取り拒否または無視できません
.. [#core-kill-term] システムコールの世界にようこそ

よくあるコマンドを示します。「-9」というお菓子を、妖精さん番号「12345」(プロセスID/PID)に与えます。2つのコマンドとも同じ意味です。

.. code-block:: sh

   $ kill -9 12345
   $ kill -KILL 12345

妖精さん番号が正の数の時、0の時、-1の時、-1より小さい時の説明があります。気になる人は自分で調べてみてください。なお、 ``killall`` というコマンドがあります。これは、引数にプロセス名を取ります。rootで単に ``killall`` を実行すると、すべてのプロセスが終了します(UNIX System Vバージョンの場合) [#core-killall]_ 。

.. [#core-killall] このへんはwikipediaあたりを参照しました


遅延
====

sleep
-----
指定された時間だけ休憩します。アラームとか実行するといいんじゃないでしょうか。

.. code-block:: sh

   $ sleep 1d 1h 1m 1s && echo $'\a'

1日+1時間+1分+1秒後にビープ音を鳴らします [#core-sleep-pi]_ 。もちろん、このコマンドを実行するマシンは足元にないとだめですよ [#core-sleep-beep]_ [#core-sleep-beep2]_ 。

.. [#core-sleep-pi] そこに転がってたfreeBSDの入った実機で echo $'\a' を実行してみたら「ピッ」って鳴った
.. [#core-sleep-beep] クラウド上のサーバがピーピーなっちゃいますよ（ホントかなぁ
.. [#core-sleep-beep2] value-serverで大量に実行してみたけど怒られなかったし、いいんじゃないでしょうか。そもそも一般ユーザで鳴るのかね？まあいいか

数値操作
========

factor
------
「せんせい！そいんすうぶんかいがしたいです」「よろしい、ならば戦争（ry」「おいやめろ！！」ということがないように、素因数分解ができるコマンドがあります。

.. code-block:: sh

   $ factor 60
   60: 2 2 3 5

原文だと唐突に、メルセンヌ素数をもとに実行例が出てきます。曰く、8番目と9番目のメルセンヌ素数 [#core-factor-m]_ を計算するときには、Athlonの2.2GHzのCPUで30ミリ秒くらいかかります [#core-factor-Mersenne]_　 、とあります。

.. code-block:: sh

   M8=$(echo 2^31-1|bc)
   M9=$(echo 2^61-1|bc)
   n=$(echo "$M8 * $M9" | bc)
   /usr/bin/time -f %U factor $n
   4951760154835678088235319297: 2147483647 2305843009213693951
   0.03

さらに読んでいきましょう。8番目のフェルマー数 [#core-factor-Fermat]_ (2^256+1)は20秒くらいかかります [#core-factor-itu]_ 。

.. [#core-factor-m] 2^n-1(nは自然数)の形の自然数且つ素数。ちなみに48番目が発見された日は、2013年1月、って最近じゃないか。物好きな方はGIMPSでググると吉
.. [#core-factor-Mersenne] さくらのサーバでやってみたら桁数多すぎで怒られました。velue-serverでやってみたら、0.02でした
.. [#core-factor-Fermat] フェルマー数とは、2^2^n+1(nは自然数)
.. [#core-factor-itu] この文章書かれたのいつなんでしょうね？

大きい数になると一般的に求めるのが難しくなります。比較的小さい数字を求めるときに、ポラード・ロー因数分解法が使われます。でかい数で且つ素因数がおっきい数を求めるときは、もっとほかの方法をとった方がよさげです。

GNU MP [#core-factor-gmp]_ を使わずにビルドされたfactorコマンドは、single-precision算術が有効になります。その算術方法は、小さい数字を計算することが得意で、2^64よりでかい数字はサポートしていません。

.. [#core-factor-gmp] GMPといって、多倍長演算ライブラリのことです。http://gmplib.org を参照

seq
---
連続した数字を表示します。使う頻度はそこそこ多いかもしれないです [#core-seq-bash]_ 。実行例はこんな感じ。

.. [#core-seq-bash] bashのカッコ展開で代用することもおおいかも。{1..100}とか


.. code-block:: sh

   $ seq 3
   1
   2
   3
   $ seq -w 7 10
   07
   08
   09
   10
   $ seq 1 2 5
   1
   3
   5
   $ seq -w 10 -2 2
   10
   08
   06
   04
   02
   $ seq -s "," 10 -2 2
   10,8,6,4,2
   $ seq -s + 1 100 | bc
   5050

オプションに関しては察してください。あとは-fオプションでprintfと同じようなフォーマットが使えるモードがあります。あとは非常に大きい数字の場合、5e+06といったような表現になるときがあります。そんなときは、-fを使ってフォーマットを指定して解決。

.. code-block:: sh

   $ seq  1000000 1000000 10000000
   1e+06
   2e+06
   3e+06
   4e+06
   5e+06
   6e+06
   7e+06
   8e+06
   9e+06
   1e+07
   $ seq -f "%.0f" 1000000 1000000 10000000
   1000000
   2000000
   3000000
   4000000
   5000000
   6000000
   7000000
   8000000
   9000000
   10000000


おわりに
--------
26章まで駆け抜けて参りましたcoreutils。実は、この後も続きます。ファイルのパーミッションの説明やdateコマンドの書式やチュートリアルなどが書かれています。それらまとめて単行本化しようかと考えていたりいなかったり。予定は未定です。
前回宿題としました、前月の最終日の日にちを表示するコマンドです。こちらです [#core-last-monthofaday]_ [#core-motto]_ 。

.. [#core-last-monthofaday] $ date -d $(date +%Y%m01)'-1day' +%Y%m%d ちょっとずるい感じもしますがこうするしかなかった（諦め
.. [#core-motto] もっと短くかける方、いますぐ筆者までリプライください

最後に、このコマンドを俺が一番うまく使えるんだ！という Tips をお持ちの方、この環境だとこの辺でこけるといった検証報告をお持ちの方、この説明違うよ!全然違うよ!!ということを思われた方は、筆者 [#hissya]_ まで連絡を頂けると大変ありがたいです [#core-boxes]_ 。


Let's enjoy coreutils life.


.. [#hissya] [連絡先] https://twitter.com/tboffice または、 tbofficed@gmail.com まで
.. [#core-boxes] 裏表紙に載ってるboxesの解説できなかった。まあ、いいよね？？
